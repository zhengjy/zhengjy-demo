NIO:
	NIO和IO的工作方式：IO（面向流），NIO（面向块）
		IO：基于字节字符流进行操作。
		NIO：基于管道(channel)和缓冲区(buffer)进行操作，数据总是从通道读取到缓冲区，或者从缓冲区写入到通道。
	异步IO：NIO可以异步的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。当数据被写入到缓冲区，线程可以继续出来它。
	Selects(选择器)：NIO引入选择器的概念，选择器可以用于监听多个通道的事件。因此单个的线程可以监听多个数据通道。

	面向流与面向缓冲：NIO和IO之间最大的区别是，IO是面向流，NIO是面向缓冲区的。
		JAVA IO面向流意味着每次从流中读取一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它们不能前后移动流中的数据。
	如果需要前后移动从流中读取的数据，需要先将它缓存在一个缓冲区。
		JAVA NIO的缓冲导向方法略有不同。数据读取一个它稍后处理的缓冲区，需要时可在缓冲区前后移动。这增加了处理过程中的灵活性。但是，
	还需要先检查是否缓冲区中包含所有处理的数据。而且，需确保当更多的数据读入缓冲区时，不用覆盖缓冲区尚未处理的数据。

	阻塞IO与非阻塞IO：
		JAVA IO的各种流是阻塞的。当调用read()或write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程不能干是他的事情。
		JAVA NIO的非阻塞模式，使用一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有可用的数据时，就什么都不会获取。
	而不是保持线程的阻塞，所以直至变的可读取之前，该线程可用继续做其他的事情。非阻塞写的也是如此。一个线程请求写入一些数据到某通道，但不需要
	等待他完全写入，这个线程同时可以去做别的事情。线程通常将非阻塞IO的空闲时间用于在其他通道上执行IO操作，所以一个单独线程可以管理多个输入和
	输出通道(channel)；

	选择器(selelctors)：
		JAVA NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来选择通道：这些通道里
	已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。
	
	什么是缓冲区：
		Buffer是一个对象，它包含一些要写入或刚读出的数据。在NIO中加入buffer对象，体现了新库与原IO的一个重要区别。在面向流的IO中，将数据直接写入或将数据直接读到流对象中。
		在NIO中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的。在写入数据时，它是写入到缓冲区中的。任何时候访问NIO中的数据，都是将它放入缓冲区。
		缓冲区实质上是一个字节数组。
		
	什么是通道：
		Channel是一个对象，可以通过他读取和写入数据。拿NIO与原来的IO做比较，通道就像流。
		所有数据都通过Buffer对象处理。永远不会将字节直接写入通道中，相反，是将数据写入包含一个或多个字节的缓冲区。同样，不会直接从通道中读取字节，而是将数据从通道读入
		缓冲区，再从缓冲区获取这个字节。	
	
	通道：
		既可以从通道读取数据，又可以写数据到通道。但流的读写通常是单向的。
		通道可以异步读写。
		通道中的数据总是要先读到一个buffer，或者从一个buffer中写入。
	
	通道类型：通道与流的不同之处在于通道是双向的。而流在一个方向像上移动，而通道可用于读、写或者同时读写。
	
	选择器：
		selector是java NIO中能够检测一个到多个NIO通道，并能够知晓通道是否为读写事件做好准备组件。这样，一个单独线程可以管理多个channel，从而管理多个网络链接。
		NIO服务端只需启动一个专门的线程来处理所有的IO事件。javaNIO采用了双向通道(channel)进行数据传输，而不是单向的流(strean)，在通道上可以注册我们感兴趣的事件。
		
		服务端和客户端各自维护一个管理通道的对象，我们称为selector,该对象能够检测一个或多个通道(channel)上的事件。如果服务端的selector上注册了读的事件，某时刻客户端
		给服务端发送了一些数据，阻塞IO这时会调用read()方法阻塞的读取数据，NIO的服务端会在selector中添加一个读事件。服务端的处理线程会轮询访问selector，如果访问selector
		时发现有感兴趣的事件到达，则处理这些事件，如果没有感兴趣的事件，则处理线程一直阻塞直到感兴趣的事件到达为止。
		
	总结：
		NIO可以让你使用一个或多个线程管理多个通道，解析数据会比一个阻塞流中读取复杂。
		如果需要管理同时打开的成千上万个连接，这些连接每次只发送少量的数据，如聊天服务器，实现NIO的服务器可能是一个优势。同样，如果你需要
	维持许多打开的连接到其他计算机上，使用一个单独的线程来管理你所有出站连接是一个优势。
	1、有一个专门的线程来处理所有的IO事件，并负责分发。
	2、事件驱动机制：事件到的时候去触发，而不是同步的去监听事件。
	3、线程通讯：线程之间通过 wait,notify等方式通讯。保证每次上下文切换都是有意义的。减少无谓的线程切换。
		
		
HTTP:是Hyper Text Transfer Protocol(超文本传输)的缩写
	HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态协议（同一个客户端的这次请求和上一次请求没有对应关系）。
	HTTP永远都是客户端发起请求，服务端响应。
	HTTP请求/响应的步骤：
		1)客户端连接到web服务器：一个HTTP客户端(浏览器)，与Web服务器的HTTP端口(默认80)建立一个TCP套接字连接。例如:http:www.baidu.com
		2)发送HTTP请求，通过TCP套接字：客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行、和请求数据4部分组成。
		3)服务器接受请求并返回HTTP响应：web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和
	响应数据4部分组成。
		4)释放连接TCP连接：web服务器主动关闭TCP套接字，释放TCP连接；客户端被动关闭TCP套接字。释放TCP连接。
		5)客户端浏览器解析HTML内容：客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每个响应头，响应头告知以下为若干字节的HTML文档和
	文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。
	
	TCP/IP的分层管理
		应用层；应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各种通用的应用服务。FTP、DNS、HTTP
		传输层：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输
		网络层：网络层用来处理在网络上流动的数据包。数据包是网络传输的嘴角数据单位。该层规定了通过怎样的路径（传输路线）到达对方计算机，并把数据包传送个对方
		链路层：用来处理连接网络的硬件部分。

	http执行流程：
		首先客户端在应用层(HTTP协议)发出一个想看某个Web页面的HTTP请求。
		接着，为了传输方便，在传输层(TCP协议)把从应用层处收到的数据(HTTP请求报文)进行分割，并各个报文上打上标记序号及端口号后转发给网络层。
		在网络层(IP协议),增加作为通信目的地的MAC地址后转发给链路层。这样一来发往网络的通信请求就准备齐全了。
		接收端的服务器在链路层接收到数据，按序网上层发送，一直到应用层。当传输到应用层，才能算真正接收到客户端发送过来的HTTP请求。
	确保可靠性的TCP协议：按层次分，TCP位于传输层，提供可靠的字节流服务
		所谓的字节流服务是指，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠的传输给对方。TCP协议是为了
		更容易传输大数据才把数据分割，而且TCP协议能够确认数据最终是否送达对方。
	确保数据能够达到目标：
		为了准确无误的将数据送达目标处，TCP采用三次握手策略。用TCP协议将数据包送出去后，TCP不会对传输后的情况置之不理，它一定会想对方确认是否成功送达。除了三
		次握手，TCP协议还有其他各种手段来保证通信的可靠性。
	负责域名解析的DNS服务:
		DNS服务是和HTTP协议一样位于应用层的协议。它提供域名到IP地址之间的解析服务。
	请求报文：请求报文是由请求方法、请求URL、协议版本、	可选的请求首部字段和内容实体构成的。

	HTTP报文：
		用于HTTP协议交互的信息被称为HTTP报文。客户端的HTTP报文叫请求报文。服务端的叫响应报文。HTTP报文本身由多行数据构成的字符串文本。HTTP报文大致可分为报文首部
	和报文主体两块。两者由最初出现的空行来划分。通常，并不一定要有报文主体。

	HTTP持久连接：
		持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP连接状态。避免三次握手。持久化连接的好处在于减少TCP连接的重复建立和断开所造成的额外开销，
	减轻了服务端的负载。在HTTP/1.1中，所有的连接默认都是持久连接。
	
	HTTPS：加上加密处理和认证以及完整性保护既是HTTPS。所谓HTTPS，其实就是身披SSL协议这层外壳的HTTP。

	HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
	HTTP协议是一个无状态的协议，同一个客户端的这次请求和上次请求是没有对应关系。想要关联起来是需要Cookie和Session。


	HTTP/1.0
		在HTTP/1.0版本中，并没有官方的标准来规定Keep-Alive如何工作，因此实际上它是被附加到HTTP/1.0协议上，如果客户端浏览器支持Keep-Alive，那么就在HTTP请求头中添加一个字段 
	Connection: Keep-Alive，当服务器收到附带有Connection: Keep-Alive的请求时，它也会在响应头中添加一个同样的字段来使用Keep-Alive。这样一来，客户端和服务器之间的HTTP
	连接就会被保持，不会断开（超过Keep-Alive规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接
	HTTP/1.1
		在HTTP/1.1版本中，官方规定的Keep-Alive使用标准和在HTTP/1.0版本中有些不同，默认情况下所在HTTP1.1中所有连接都被保持，除非在请求头或响应头中指明要关闭：
	Connection: Close  ，这也就是为什么Connection: Keep-Alive字段再没有意义的原因。另外，还添加了一个新的字段Keep-Alive:，因为这个字段并没有详细描述用来做什么，可忽略它

		
Spring
	bean 是在什么时候被创建的，有哪些规则？
		容器初始化的时候会预先对单例和非延迟加载的对象进行预先初始化。其他的都是延迟加载是在第一次调用getBean 的时候被创建。

	1.容器启动阶段：Spring提供了两种方式的BeanDefinition解析器，PropertiesBeanDefinitionReader和XmlBeanDefinitionReader（org.xml.sax包）解析器，也可以自定义自己的解析器，他们
	都实现了BeanDefinitionReader。加载配置进行解析分析，并将分析后的信息编组为相应的BeanDefinition,注册到相应的BeanDifinitionRegister，存
	放到beanDefinitionMap(key为beanName,value为BeanDefinition)
		1)加载配置
		2)分析配置信息
		3)装备到BeanDefinition
		4)其他后处理
	2.容器实例化阶段：BeanDefinition注册到了BeanDefinitionRegister中之后，当某个请求通过容器的geBean方法明确的请求某个对象，容器会检查所请求的对象是否已经初始化。
	如果没有，则会根据注册的BeanDefinition所提供的信息实例化请求对象，并未其注入依赖。如果该对象实现了某些回调接口，也会根据回调接口的要求来装配他。当该对象装配完成
	后，容器会立即返回请求方使用。(如果装载A，会先装载A锁依赖的bean。)
		1)实例化对象
		2)装配依赖
		3)生命周期的回调
		4)对象其他处理
		5)注册回调接口
		
	为了给容器中定义的每个bean对应的实例注入依赖，可以遍历他们，通过反射检查每个bean定义对应的类上各种可能位置上的Autowired。如果存在的话就可以从当前容器管理的对象
	中获取符合条件的对象，设置给Autowired标注的地方。
		
	BeanFactoryPosProcessor：容器扩展机制。该机制允许我们在容器实例化对象之前，对注册容器的BeanDefinition所保存的信息做修改。比如修改bean定义的某些属性、增加其他信息
	如果要自定义需要实现这个接口。
	
	PropertyPlaceHolerConfigurer：在第一阶段加载完成所有的配置信息时，BeanDifinition中保存的对象属性信息还只是以占位符的形式存在，如${jdbc.url},PPHC会使用propertis配置
	文件中的配置信息来替换相应的BeanDefication中占位符所表示的属性值。
		
	AOP：Spring AOP采用动态带来机制和字节码生成技术(CGLIB)实现，动态带来和字节码生成都是在运行期间为目标生成一个代理对象，而将横切逻辑加入到这个代理对象中。系统最终
	使用的是加入横切逻辑代理对象，而不是真正的目标对象。如果目标对象没有实现任何接口，Spring AOP 会使用CGLIB(基于类的代理)
	
		
	Spring MVC:当我们对SpringMVC控制的资源发起请求时,这些请求都会被SpringMVC的DispatcherServlet处理，通过BeanNameUrlHandlerMapping找到对应的Controller，然后拿到这个
	Controller和每个adapter进行适配，找到SimpleControllerHandlerAdapter来完成对应请求的Controller的handlerRequest方法调度，然后就顺利的执行了我们想要的方法。方法
	会返回一个ModelAndView对象。在获得ModelAndView对象之后，Spring就需要把该View渲染给用户。在这个渲染的过程中，发挥作用的就是ViewResolver和View。当Handler返回
	ModelAndView中不包含真正的视图，只返回一个逻辑视图名称，ViewResolver就会把改视图名称解析为真正的视图View对象。View是真正进行视图渲染，把结果返回给浏览器的。
	
	Spring MVC 5大角色：HandlerMapping、Controller、ModelAndView、ViewResolver、View。
		 视图:
			Spring为我们提供了非常多的视图解析器。有一个AbstractCachingViewResolver抽象类，这种视图解析器会把曾经解析的视图保存下来，然后每次解析视图的时候先从缓存
		里面找，找到了对应的视图就直接返回，如果没有找到就创建一个新的视图对象。然后把他放到一个用于缓存的map中，接着再把新建的视图返回。这种可以降低性能。比较常用
		的InternalResourceViewResolver是使用比较广泛的视图解析器。InternalResourceViewResolver会把返回的视图名称解析为InternalResourceView对象，InternalResourceView
		会把Controller处理器方法返回的模型属性都放到对应的request属性中，然后通过RequestDispatcher在服务器端转发或重定向目标URL。
		
		获取Handler：(找到Controller)
		getHandler，通过遍历所有已经注册过的HandlerMapping来找到对应的Handler，然后构建出一个HandlerExecutionChain，
		他包含了handler和HandlerMaping本身的一些拦截器。
	
		HandlerMapping的getHandler实现：有一个getHandlerInternal(request)是个抽象方法，由具体的HandlerMapping
		来实现，获取到的handler如果为null，则取默认的handler。如果handler为String类型则去容器里面找这样名称的bean.
		
		BeanNameUrlHandlerMapping的getHandlerInternal(request)的具体实现,bean的name必须以/开头，他才处理，将信息存储到map中。
		
		获取HandlerAdapter：(找到Controller下的方法)
			同Handler遍历所有已经注册到容器的HandlerAdapter，找到HandlerAdapter。验证是否已实现了HandlerRequestHandler接口
			若已实现该接口则调用匹配到适配器的实现类下handle方法，执行逻辑。

		初始化HandlerMapping和HandlerAdapter：
			首先会判断delectAllHandlerMappings是否为true,如果为true，则会去本工程mvc-servlet.xml文件去探测所有实现
			了HandlerMapping的bean，如果有，则加入DispatcherServlet的HandlerMapprings集合中。如果delectAllHandlerMappings
			为false，则直接去容器中找id="handlerMapping"且实现了HandlerMappingg的bean，如果都没找到，则会去加载默认
			的HandlerMapping，会去读取DispatcherServlet.properties文件，里面有默认的BeanNameUrlHandlerMapping、
			HttpRequestHanderAdapter。
		
		HandlerMapping将会通过返回HandlerExecutionChain返回一个Controoler用于具体web请求的处理。可以不只是Controller
		一种类型。在Spring MVC中任何用于web请求处理的处理对象统称handler。Controller是Handler的一种特殊类型。HandlerMapping
		通过HandlerExecutionChain返回的一个Object类型的Handler对象，而并没有限制只能是Controller类型。

		HandlerExecutionChain就是一个数据载体，他包含了两方面的数据，一个用于处理Web请求的Handler,另一个则是一组
		随同Handler一起返回的HandlerInterceptor。这组HandlerInterceptor可以在Handler的执行前后对处理流程拦截操作。
		
		
		HandlerInterceptor:
		preHandle():该拦截方法将在相应的HandlerAdapter调用具体的Handler处理web请求之前执行。通过boolean判断
		是否往下执行。true，表明允许后继处理流程继续执行。false：不允许继续往下执行。
		postHandle():该拦截方法的执行时机为HandlerAdapter调用具体的Handler处理完web请求之后，并且在视图的解析
		和渲染之前。通过该方法我们可以获取Handler执行后的结果，即ModelAndView。我们可以在原处理结果的基础上对
		其进行进一步的处理，比如添加新的模型数据。返回为void，不可阻断后续处理。
		afterCompletion():在框架内整个流程处理完后，或者视图都渲染完了的时候，不管是否发生异常，都会执行。
		
		
		Filter位于DispatcherServlet之前。如果把Filter和HandlerInterceptor看作同一类型的拦截器，Filter将比HanlderInterceptor
		拥有更高的执行优先级。
		filter在servlet层面对DispatcherServlet进行拦截，而HandlerInterceptor则位于DispatcherServlet内部，对Handler
		的执行进行拦截。Filter的应用的位置注定了它不能提供细粒度的拦截时点。通常情况下，使用Filter对应web应用程序
		中的一些普遍关注点进行统一处理是比较合适的，一旦需要细化处理流程的拦截逻辑，则用HandlerInterceptor。

		Filter是servlet标准组件，需要在xml配置，其生命周期管理更多是由web容器进行管理的。
		
		文件上传与MultipartResolver
		html页面表单最初采用的是application/x-www-form-urlencoded编码方法，并不足以满足文件上传的需要，所以，RFC
		在基础上新增了multipart/form-data编码的方式以支持基于表单提交的方式支持文件上传。客户端浏览器将按照
		RFC1867所规定的格式，对提交的表单内容进行编码，服务器只需要根据RFC1867规定的格式对请求中的信息进行解码，
		就可以获得客户端表单提交的内容，包括上传的文件。
		
		MultipartResolver简单分析：
			当web请求到达DispatcherServlet并等候处理的时候，DispatcherServlet首先会去检查能否从自己的WebApplicationContext
		中找到一个名称为multipartResolver的MultipartResolver实例。如果能够获得一个实例，DispatcherServlet将通过
		MultipartResolver的isMultipart(request)方法检查当前web请求是否为multipart类型。如果是DispatcherServlet将调用
		MultipartResolver的resolverMultipart(request)方法，并返回MultipartHttpServletRequest供后继处理流程使用，否则
		直接返回HttpServlectRequest。当web类型为multipart的时候，MultipartResolver的resolverMultipart(request)所返回
		的MultipartHttpServlectRequest将被后继处理流程所依赖的HttpServletRequest而使用。也就是说对应的HttpServletRequest
		会被替换为MultipartHttpServletRequest，后续的处理的各个环节都是MultipartHttpServletRequest。
		MultipartResolver接口SpringMVC提供了两个可用的实现类。CommonsMultipartResolver、CosMultipartResolver	
		
			BeanFactoryPostProcessor 干预容器启动阶段，如PropertySourcesPlaceholderConfigurer,当BeanFactory在第一阶段加载
完所有配置信息时，BeanFactory中所保存的对象属性信息还只是以占位符的形式存在，如${jdbc.url}。当
PropertyPlaceholderConfigurer 作为 BeanFactoryPostProcessor 被应用时，他会使properties配置文件中的配置信息
来替换BeanDefinition中占位符所表示的属性值。这样，当进入容器实例的第二阶段实例化bean时，bean定义中的属性值
就是最终替换完成了


BeanPostProcessor存在与对象实例化阶段
BeanFactoryPostProcessor存在与容器启动阶段

spring数据准备阶段：首先对传入的参数resource参数做封装，目的是考虑到Resource可能存在编码要求的情况，其次，
通过SAX读取XML文件的方式做准备InputSource对象，最后将准备的数据通过参数真正核心处理的部分
doLoadBeanDefinition(inputSource,encodedResoure.getResource())。

		
序列化：
	将一个对象编码成一个字节流，称作将该对象序列化；相反的处理过程被称为反序列化。一旦对象被序列化后，它的编码就可以从一台正在运行的虚拟机被传递给另外一条虚拟机
	上，或者被存储到磁盘上，以供反序列化时用。
		
		
		
		
		
		



	